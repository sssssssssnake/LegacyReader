import java.io.*;
import java.nio.file.*;
import java.util.regex.*;
import java.util.ArrayList;


public class Main {

  static String path = "/home/sssssssssnake/Downloads/22G_Minor22/score.xml";
  static String keyword = "note";
  static ArrayList<XmlGroup> notes = new ArrayList<XmlGroup>();
  static ArrayList<String[]> measureHeaders = new ArrayList<String[]>();

  static ArrayList<int[]> measureStartEnd = new ArrayList<int[]>();
  public static void main(String[] args) {



    try {
      String xmlContent = new String(Files.readAllBytes(Paths.get(path)));
      scanXMLForKeywordList(xmlContent, keyword, notes);
      scanXMLForMeasureStartEnd(xmlContent, measureStartEnd);
      measureHeaders = grabHeaders(xmlContent, "measure");
     } catch (IOException e) {
      System.err.println("Error reading the file: " + e.getMessage());
    }
    print("Found " + notes.size() + " " + keyword + "s");

    print("Found " + measureStartEnd.size() + " measures");







    // print first 10 notes
    for (int i = 0; i < 10; i++) {
      print(notes.get(i).contents);
    }

    // print first 20 note start and end lines

    for (int i = 0; i < 20; i++) {
      print("Start line: " + notes.get(i).startLine + " End line: " + notes.get(i).endLine);
    }

    // print first 10 letternames of the notes

    for (int i = 0; i < 10; i++) {
      print(grabContents(notes.get(i).contents, "step")+ grabContents(notes.get(i).contents, "octave"));
    }

    // print first 10 measure start and end lines

    for (int i = 0; i < 10; i++) {
      print("Start line: " + measureStartEnd.get(i)[0] + " End line: " + measureStartEnd.get(i)[1]);
    }

    // print first 10 measure headers
    for (int i = 0; i < 10; i++) {
      for (int j = 0; j < measureHeaders.get(i).length; j++) {
        print(measureHeaders.get(i)[j] + " " + j);
      }
      print("");
    }
  }




  public static void print(String text) {
    System.out.println(text);
  }

  public static void GrabNumbers() {

  }

  public static void scanXMLForKeywordList(String xml, String keyword, ArrayList<XmlGroup> notes) {
    String patternString = "<" + keyword + ".*?</" + keyword + ">";
    Pattern pattern = Pattern.compile(patternString, Pattern.DOTALL);
    Matcher matcher = pattern.matcher(xml);
    while (matcher.find()) {
      String match = matcher.group();
      int startLine = countLines(xml.substring(0, matcher.start())) + 1;
      int endLine = countLines(xml.substring(0, matcher.end()));

      notes.add(new XmlGroup(startLine, endLine, match));
    }
  }

  // make a method that grabs the first and last line of each measure

  public static void scanXMLForMeasureStartEnd(String xml, ArrayList<int[]> measureStartEnd) {
    String patternString = "<measure.*?</measure>";
    Pattern pattern = Pattern.compile(patternString, Pattern.DOTALL);
    Matcher matcher = pattern.matcher(xml);
    while (matcher.find()) {
      String match = matcher.group();
      int startLine = countLines(xml.substring(0, matcher.start())) + 1;
      int endLine = countLines(xml.substring(0, matcher.end()));

      measureStartEnd.add(new int[] {startLine, endLine});
    }
  }

  public static int countLines(String str) {
    String[] lines = str.split("\r\n|\r|\n");
    return lines.length;
   }

  // Make a method that grabs only the contents from an xml text

  public static String grabContents(String data, String keyword) {
    String patternString = "<" + keyword + ".*?>(.*?)</" + keyword + ">";
    Pattern pattern = Pattern.compile(patternString, Pattern.DOTALL);
    Matcher matcher = pattern.matcher(data);
    if (matcher.find()) {
      return matcher.group(1);
    }
    return "";
  }

  // Make a method that grabs the headers of the xml text
  // stuff that is the attribute="value" part of the xml
  public static ArrayList<String[]> grabHeaders(String data, String keyword) {
    String patternString = "<" + keyword + "\\s+(.*?)>";
    Pattern pattern = Pattern.compile(patternString, Pattern.DOTALL);
    Matcher matcher = pattern.matcher(data);
    ArrayList<String[]> headers = new ArrayList<>();

    while (matcher.find()) {
      String headerStr = matcher.group(1);
      // Split the header string on spaces, except when spaces are within quotes
      String[] headerPairs = headerStr.split("\\s+(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)");
      ArrayList<String[]> headerAttributes = new ArrayList<>();
      for (String headerPair : headerPairs) {
        // Split each pair on '=' and remove the quotes from the value
        String[] keyValue = headerPair.split("=");
        keyValue[1] = keyValue[1].replaceAll("^\"|\"$", "");
        headerAttributes.add(keyValue);
      }
      headers.addAll(headerAttributes);
    }
    return headers;
  }




  static public class XmlGroup {
    public int startLine;
    public int endLine;
    public String contents;

    public XmlGroup (int start, int end, String stuff) {
      startLine = start;
      endLine = end;
      contents = stuff;
    }
  }
}


